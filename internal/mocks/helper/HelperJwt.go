// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	helper "github.com/ricky7171/te-marketplace/internal/helper"
	mock "github.com/stretchr/testify/mock"
)

// HelperJwt is an autogenerated mock type for the HelperJwt type
type HelperJwt struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: email, userId
func (_m *HelperJwt) GenerateToken(email string, userId int) (string, string, error) {
	ret := _m.Called(email, userId)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(email, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, int) string); ok {
		r1 = rf(email, userId)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(email, userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ValidateRefreshToken provides a mock function with given fields: signedToken
func (_m *HelperJwt) ValidateRefreshToken(signedToken string) (*helper.SignedRefreshTokenDetails, error) {
	ret := _m.Called(signedToken)

	var r0 *helper.SignedRefreshTokenDetails
	if rf, ok := ret.Get(0).(func(string) *helper.SignedRefreshTokenDetails); ok {
		r0 = rf(signedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helper.SignedRefreshTokenDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: signedToken
func (_m *HelperJwt) ValidateToken(signedToken string) (*helper.SignedTokenDetails, error) {
	ret := _m.Called(signedToken)

	var r0 *helper.SignedTokenDetails
	if rf, ok := ret.Get(0).(func(string) *helper.SignedTokenDetails); ok {
		r0 = rf(signedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helper.SignedTokenDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHelperJwt interface {
	mock.TestingT
	Cleanup(func())
}

// NewHelperJwt creates a new instance of HelperJwt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHelperJwt(t mockConstructorTestingTNewHelperJwt) *HelperJwt {
	mock := &HelperJwt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
