// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	accountdom "github.com/ricky7171/te-marketplace/internal/modules/account/domain"
	mock "github.com/stretchr/testify/mock"
)

// AuthenticationService is an autogenerated mock type for the AuthenticationService type
type AuthenticationService struct {
	mock.Mock
}

// Login provides a mock function with given fields: email, password
func (_m *AuthenticationService) Login(email string, password string) (string, string, *accountdom.Account, error) {
	ret := _m.Called(email, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 *accountdom.Account
	if rf, ok := ret.Get(2).(func(string, string) *accountdom.Account); ok {
		r2 = rf(email, password)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*accountdom.Account)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, string) error); ok {
		r3 = rf(email, password)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

type mockConstructorTestingTNewAuthenticationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthenticationService creates a new instance of AuthenticationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthenticationService(t mockConstructorTestingTNewAuthenticationService) *AuthenticationService {
	mock := &AuthenticationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
