// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v4"

	mock "github.com/stretchr/testify/mock"
)

// MyJwt is an autogenerated mock type for the MyJwt type
type MyJwt struct {
	mock.Mock
}

// GenerateStandardClaims provides a mock function with given fields: hours
func (_m *MyJwt) GenerateStandardClaims(hours int) jwt.RegisteredClaims {
	ret := _m.Called(hours)

	var r0 jwt.RegisteredClaims
	if rf, ok := ret.Get(0).(func(int) jwt.RegisteredClaims); ok {
		r0 = rf(hours)
	} else {
		r0 = ret.Get(0).(jwt.RegisteredClaims)
	}

	return r0
}

// NewToken provides a mock function with given fields: method, claims
func (_m *MyJwt) NewToken(method jwt.SigningMethod, claims jwt.Claims) (string, error) {
	ret := _m.Called(method, claims)

	var r0 string
	if rf, ok := ret.Get(0).(func(jwt.SigningMethod, jwt.Claims) string); ok {
		r0 = rf(method, claims)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(jwt.SigningMethod, jwt.Claims) error); ok {
		r1 = rf(method, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseWithClaims provides a mock function with given fields: tokenString, claims, keyFunc, options
func (_m *MyJwt) ParseWithClaims(tokenString string, claims jwt.Claims, keyFunc jwt.Keyfunc, options ...jwt.ParserOption) (*jwt.Token, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, tokenString, claims, keyFunc)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string, jwt.Claims, jwt.Keyfunc, ...jwt.ParserOption) *jwt.Token); ok {
		r0 = rf(tokenString, claims, keyFunc, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, jwt.Claims, jwt.Keyfunc, ...jwt.ParserOption) error); ok {
		r1 = rf(tokenString, claims, keyFunc, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMyJwt interface {
	mock.TestingT
	Cleanup(func())
}

// NewMyJwt creates a new instance of MyJwt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMyJwt(t mockConstructorTestingTNewMyJwt) *MyJwt {
	mock := &MyJwt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
